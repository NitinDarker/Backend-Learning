/**
  An express HTTP server in Node.js which will handle the logic of a todo list app.
  - In-memory storage (no databases yet)
  - Hard todo: Save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below:
  1. GET /todos - Retrieve all todo items
  2. GET /todos/:id - Retrieve a specific todo item by ID
  3. POST /todos - Create a new todo item
  4. PUT /todos/:id - Update an existing todo item by ID
  5. DELETE /todos/:id - Delete a todo item by ID
*/

const express = require("express");
const bodyParser = require("body-parser");

const app = express();

app.use(bodyParser.json());

let todos = []; // In-memory todo list

// Title Page
app.get("/", (req, res) => {
  console.log("Someone has hit the GET/ request");
  res.send(
    "Welcome to Nitin's TODO Website! \n\n" +
      "Use GET/todos - see your todos \n" +
      "Use GET/todos/:id - Retrieve a specific todo item by ID \n" +
      "Use POST /todos - Creates a new todo item \n" +
      "Use PUT /todos/:id - Update an existing todo item by ID \n" +
      "Use DELETE /todos/:id - Delete a todo item by ID \n" +
      "\n\nListening to port 3000"
  );
});

// Returns an array of all the todo items as objects
app.get("/todos", (req, res) => {
  console.log("Someone has hit the GET/todos request");
  res.status(200).send(todos);
});

// Returns the todo item with the given ID
app.get("/todos/:id", (req, res) => {
  console.log("Someone has hit the GET/todos/:id request");
  let id = parseInt(req.params.id);
  for (let i = 0; i < todos.length; i++) {
    if (todos[i].id == id) {
      res.status(200).json(todos[i]);
      return;
    }
  }
  res.sendStatus(404);
});

// Creates a new todo item
app.post("/todos", (req, res) => {
  console.log("Someone has hit the POST/todos request");
  let bodyObject = req.body;
  let randomID = (min, max) => {
    return randomID = Math.floor(Math.random() * (max - min) + min);
  };
  bodyObject.id = randomID(1, 1000);
  let idJSON = { id: randomID };
  todos.push(bodyObject);
  res.status(201).json(idJSON);
});

// Update an existing todo item by ID
app.put("/todos/:id", (req, res) => {
  console.log("Someone has hit the PUT/todos/:id request");
  let todoID = req.params.id;
  let givenBody = req.body;
  for (let task of todos) {
    if (task.id == todoID) {
      if ("title" in givenBody) task.title = givenBody.title;
      if ("completed" in givenBody) task.completed = givenBody.completed;
      if ("description" in givenBody) task.description = givenBody.description;
      res.sendStatus(200);
      return;
    }
  }
  res.sendStatus(404);
});

app.delete("/todos/:id", (req, res) => {
  console.log("Someone has hit the DELETE/todos/:id request");
  let todoID = req.params.id;
  let oldTodoLength = todos.length;
  todos = todos.filter((i) => i.id != todoID);
  if (todos.length == oldTodoLength) {
    res.sendStatus(404);
    return;
  }
  res.sendStatus(200);
});

// for all other routes, return 404
app.use((req, res, next) => {
	res.status(404).send("Route does not exist");
}); // 404 handler
// Catch-All Middleware

app.listen(3000, () => {
	console.log("Listening to port" , 3000);
});